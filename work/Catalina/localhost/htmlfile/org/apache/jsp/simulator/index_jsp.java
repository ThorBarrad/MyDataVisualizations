/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.16
 * Generated at: 2022-04-16 15:14:25 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.simulator;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.mysql.jdbc.Driver;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.jdbc.Driver");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<body>\r\n");
      out.write("    <a href=\"https://www.aminer.cn/channel/143\">\r\n");
      out.write("    <h1 style=\"text-align: right;\">\r\n");
      out.write("        arXiv论文发表数量随时间变化曲线\r\n");
      out.write("    </h1>\r\n");
      out.write("    </a>\r\n");
      out.write("    <h2 style=\"text-align: right;\">\r\n");
      out.write("        2007-5至2022-3\r\n");
      out.write("    </h2>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    ");

        String driverName="com.mysql.jdbc.Driver";
        String userName="root";
        String userPasswd="jzljzl233";
        String dbName="english";
        String tableName="paper2";
        String url="jdbc:mysql://localhost/"+dbName+"?user="+userName+"&password="+userPasswd;
        Class.forName(driverName).newInstance();
        Connection connection=DriverManager.getConnection(url);
        Statement statement=connection.createStatement();
        
        String sql="SELECT publish_date,SUM(AI),SUM(AR),SUM(CC),SUM(CE),SUM(CG),SUM(CL),SUM(CR),SUM(CV),SUM(CY),SUM(DB),SUM(DC),SUM(DL),SUM(DM),SUM(DS),SUM(ET),SUM(FL),SUM(GL),SUM(GR),SUM(GT),SUM(HC),SUM(IR),SUM(IT),SUM(LG),SUM(LO),SUM(MA),SUM(MM),SUM(MS),SUM(NA),SUM(NE),SUM(NI),SUM(OH),SUM(OS),SUM(PF),SUM(PL),SUM(RO),SUM(SC),SUM(SD),SUM(SE),SUM(SI),SUM(SY) FROM english.paper2 group by publish_date";

        ResultSet rs=statement.executeQuery(sql);

        String[][] catcount=new String[179][41];
        int i=0;
        while(rs.next()){
            for(int count=0;count<41;count++){
                catcount[i][count]=rs.getString(count+1);
                //out.print(rs.getString(count+1)+" ");
            }
            //out.print("<br>");
            i++;
        }
        

        rs.close();
        statement.close();
        connection.close();
    
      out.write("\r\n");
      out.write("    <script src=\"../package/d3.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("        var screenwidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;\r\n");
      out.write("        var screenheight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;\r\n");
      out.write("        screenwidth=screenwidth-50;\r\n");
      out.write("        screenheight=screenheight-180;\r\n");
      out.write("\r\n");
      out.write("        var svg=d3.select(\"body\")\r\n");
      out.write("                .append(\"svg\")\r\n");
      out.write("                .attr(\"width\",screenwidth+40)\r\n");
      out.write("                .attr(\"height\",screenheight+20)\r\n");
      out.write("\r\n");
      out.write("        var sbj=new Array(\r\n");
      out.write("            \"Artificial Intelligence\",\r\n");
      out.write("            \"Hardware Architecture\",\r\n");
      out.write("            \"Computational Complexity\",\r\n");
      out.write("            \"Computational Engineering, Finance, and Science\",\r\n");
      out.write("            \"Computational Geometry\",\r\n");
      out.write("            \"Computation and Language\",\r\n");
      out.write("            \"Cryptography and Security\",\r\n");
      out.write("            \"Computer Vision and Pattern Recognition\",\r\n");
      out.write("            \"Computers and Society\",\r\n");
      out.write("            \"Databases\",\r\n");
      out.write("\r\n");
      out.write("            \"Distributed, Parallel, and Cluster Computing\",\r\n");
      out.write("            \"Digital Libraries\",\r\n");
      out.write("            \"Discrete Mathematics\",\r\n");
      out.write("            \"Data Structures and Algorithms\",\r\n");
      out.write("            \"Emerging Technologies\",\r\n");
      out.write("            \"Formal Languages and Automata Theory\",\r\n");
      out.write("            \"General Literature\",\r\n");
      out.write("            \"Graphics\",\r\n");
      out.write("            \"Computer Science and Game Theory\",\r\n");
      out.write("            \"Human-Computer Interaction\",\r\n");
      out.write("\r\n");
      out.write("            \"Information Retrieval\",\r\n");
      out.write("            \"Information Theory\",\r\n");
      out.write("            \"Machine Learning\",\r\n");
      out.write("            \"Logic in Computer Science\",\r\n");
      out.write("            \"Multiagent Systems\",\r\n");
      out.write("            \"Multimedia\",\r\n");
      out.write("            \"Mathematical Software\",\r\n");
      out.write("            \"Numerical Analysis\",\r\n");
      out.write("            \"Neural and Evolutionary Computing\",\r\n");
      out.write("            \"Networking and Internet Architecture\",\r\n");
      out.write("\r\n");
      out.write("            \"Other Computer Science\",\r\n");
      out.write("            \"Operating Systems\",\r\n");
      out.write("            \"Performance\",\r\n");
      out.write("            \"Programming Languages\",\r\n");
      out.write("            \"Robotics\",\r\n");
      out.write("            \"Symbolic Computation\",\r\n");
      out.write("            \"Sound\",\r\n");
      out.write("            \"Software Engineering\",\r\n");
      out.write("            \"Social and Information Networks\",\r\n");
      out.write("            \"Systems and Control\",\r\n");
      out.write("        )\r\n");
      out.write("\r\n");
      out.write("        var data=new Array(40)\r\n");
      out.write("\r\n");
      out.write("        ");
for(int k=0;k<40;k++){
      out.write("\r\n");
      out.write("            data[");
      out.print(k);
      out.write("]={text:sbj[");
      out.print(k);
      out.write("],pubcount:new Array(179),pubcount2:new Array(179)}\r\n");
      out.write("            ");
for(int j=0;j<179;j++){
      out.write("\r\n");
      out.write("                data[");
      out.print(k);
      out.write("].pubcount[");
      out.print(j);
      out.write(']');
      out.write('=');
      out.print(catcount[j][k+1]);
      out.write("\r\n");
      out.write("                data[");
      out.print(k);
      out.write("].pubcount2[");
      out.print(j);
      out.write(']');
      out.write('=');
      out.print(catcount[j][k+1]);
      out.write("\r\n");
      out.write("            ");
}
      out.write("\r\n");
      out.write("        ");
}
      out.write("\r\n");
      out.write("        \r\n");
      out.write("        for(var m=0;m<data.length;m++){\r\n");
      out.write("            data[m].show=true\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        var color=d3.schemeCategory10\r\n");
      out.write("\r\n");
      out.write("        for(var m=0;m<40;m++){\r\n");
      out.write("            data[m].value=0\r\n");
      out.write("            for(var n=0;n<179;n++){\r\n");
      out.write("                data[m].value+=data[m].pubcount[n]\r\n");
      out.write("            }\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        data=data.sort(function(m,n){\r\n");
      out.write("            if(m.value>n.value){\r\n");
      out.write("                return -1\r\n");
      out.write("            }\r\n");
      out.write("            else if(m.value<n.value){\r\n");
      out.write("                return 1\r\n");
      out.write("            }\r\n");
      out.write("            else{\r\n");
      out.write("                return 0\r\n");
      out.write("            }\r\n");
      out.write("        })\r\n");
      out.write("\r\n");
      out.write("        data=data.splice(0,10)\r\n");
      out.write("\r\n");
      out.write("        function drawlines(){\r\n");
      out.write("            d3.selectAll('[id=\"' +\"lines\"+'\"]').remove()\r\n");
      out.write("            var maxheight=0\r\n");
      out.write("            for(var m=0;m<179;m++){\r\n");
      out.write("                var temp=0\r\n");
      out.write("                for(var n=0;n<10;n++){\r\n");
      out.write("                    if(data[n].show){\r\n");
      out.write("                        temp+=data[n].pubcount[m]\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                if(temp>maxheight){\r\n");
      out.write("                    maxheight=temp\r\n");
      out.write("                }\r\n");
      out.write("            }\r\n");
      out.write("            for(var m=0;m<10;m++){\r\n");
      out.write("                for(var n=0;n<179;n++){\r\n");
      out.write("                    if(m>0){\r\n");
      out.write("                        if(data[m].show){\r\n");
      out.write("                            data[m].pubcount[n]+=data[m-1].pubcount[n]\r\n");
      out.write("                        }\r\n");
      out.write("                        else{\r\n");
      out.write("                            data[m].pubcount[n]=data[m-1].pubcount[n]\r\n");
      out.write("                        }\r\n");
      out.write("                    }\r\n");
      out.write("                    else if(m==0&&!data[m].show){\r\n");
      out.write("                        data[m].pubcount[n]=0\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                if(!data[m].show){\r\n");
      out.write("                    continue\r\n");
      out.write("                }\r\n");
      out.write("                svg.selectAll(\"line\"+m)\r\n");
      out.write("                    .data(data[m].pubcount)\r\n");
      out.write("                    .enter()\r\n");
      out.write("                    .append(\"line\")\r\n");
      out.write("                    .attr(\"x1\",function(d,i){\r\n");
      out.write("                        return 10+screenwidth*0.7*i/179\r\n");
      out.write("                    })\r\n");
      out.write("                    .attr(\"y1\", function(d,i){\r\n");
      out.write("                        return screenheight*(1-d/maxheight)\r\n");
      out.write("                    })  \r\n");
      out.write("                    .attr(\"x2\", function(d,i){\r\n");
      out.write("                        return 10+screenwidth*0.7*(i+1)/179\r\n");
      out.write("                    })  \r\n");
      out.write("                    .attr(\"y2\", function(d,i){\r\n");
      out.write("                        if(i==178){\r\n");
      out.write("                            return screenheight*(1-d/maxheight)\r\n");
      out.write("                        }\r\n");
      out.write("                        return screenheight*(1-data[m].pubcount[i+1]/maxheight)\r\n");
      out.write("                    })  \r\n");
      out.write("                    .attr(\"stroke\", function(d,i){\r\n");
      out.write("                        return color[m]\r\n");
      out.write("                    })  \r\n");
      out.write("                    .attr(\"stroke-width\", \"1px\")\r\n");
      out.write("                    .attr(\"id\",\"lines\")\r\n");
      out.write("                    // .on(\"mouseover\",function(d,i){\r\n");
      out.write("                    //     d3.select(this).attr(\"stroke-width\", \"3px\")\r\n");
      out.write("                        \r\n");
      out.write("                    //     svg.append(\"text\")\r\n");
      out.write("                    //         .attr(\"x\",function(){\r\n");
      out.write("                    //             return 10+screenwidth*0.7*(a+0.5)/179\r\n");
      out.write("                    //         })\r\n");
      out.write("                    //         .attr(\"y\",screenheight+15)\r\n");
      out.write("                    //         .text(function(){\r\n");
      out.write("                    //             return data[m].text\r\n");
      out.write("                    //         })\r\n");
      out.write("                    //         .attr(\"font-size\",15)\r\n");
      out.write("                    //         .style(\"fill\",function(){\r\n");
      out.write("                    //             return color[m]\r\n");
      out.write("                    //         })\r\n");
      out.write("                    //         .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("                    //         .attr(\"id\",\"texts\")\r\n");
      out.write("                    // })\r\n");
      out.write("                    // .on(\"mouseout\",function(d,i){\r\n");
      out.write("                    //     d3.select(this).attr(\"stroke-width\", \"1px\")\r\n");
      out.write("                    //     d3.selectAll('[id=\"' +\"texts\"+'\"]').remove()\r\n");
      out.write("                    // })\r\n");
      out.write("            }\r\n");
      out.write("            svg.append(\"text\")\r\n");
      out.write("                .attr(\"x\",6)\r\n");
      out.write("                .attr(\"y\",15)\r\n");
      out.write("                .text(maxheight)\r\n");
      out.write("                .attr(\"font-size\",15)\r\n");
      out.write("                .style(\"fill\",\"black\")\r\n");
      out.write("                .attr(\"text-anchor\",\"left\")\r\n");
      out.write("                .attr(\"id\",\"lines\")\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("        svg.append(\"line\")\r\n");
      out.write("                .attr(\"x1\",6)\r\n");
      out.write("                .attr(\"y1\", screenheight)  \r\n");
      out.write("                .attr(\"x2\", 6)  \r\n");
      out.write("                .attr(\"y2\", 15)  \r\n");
      out.write("                .attr(\"stroke\", \"black\")  \r\n");
      out.write("                .attr(\"stroke-width\", \"2px\")\r\n");
      out.write("        svg.append(\"line\")\r\n");
      out.write("                .attr(\"x1\",6)\r\n");
      out.write("                .attr(\"y1\", screenheight)  \r\n");
      out.write("                .attr(\"x2\", screenwidth*0.72)  \r\n");
      out.write("                .attr(\"y2\", screenheight)  \r\n");
      out.write("                .attr(\"stroke\", \"black\")  \r\n");
      out.write("                .attr(\"stroke-width\", \"2px\")\r\n");
      out.write("\r\n");
      out.write("        drawlines()\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        svg.selectAll(\"text2\")\r\n");
      out.write("            .data(data)\r\n");
      out.write("            .enter()\r\n");
      out.write("            .append(\"text\")\r\n");
      out.write("            .attr(\"x\",function(d,i){\r\n");
      out.write("                return screenwidth*0.87\r\n");
      out.write("            })\r\n");
      out.write("            .attr(\"y\",function(d,i){\r\n");
      out.write("                return screenheight*(0.95-i*0.1)\r\n");
      out.write("            })\r\n");
      out.write("            .text(function(d,i){\r\n");
      out.write("                return d.text\r\n");
      out.write("            })\r\n");
      out.write("            .attr(\"font-size\",15)\r\n");
      out.write("            .style(\"fill\", function(d, i) {\r\n");
      out.write("                return color[i]; \r\n");
      out.write("            })\r\n");
      out.write("            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("            .on(\"click\",function(d,i){\r\n");
      out.write("                d3.select(this).attr(\"opacity\",function(){\r\n");
      out.write("                    if(!i.show){\r\n");
      out.write("                        return \"100%\"\r\n");
      out.write("                    }\r\n");
      out.write("                    else{\r\n");
      out.write("                        return \"40%\"\r\n");
      out.write("                    }\r\n");
      out.write("                })\r\n");
      out.write("                i.show=!i.show\r\n");
      out.write("                for(var m=0;m<10;m++){\r\n");
      out.write("                    for(var n=0;n<179;n++){\r\n");
      out.write("                        data[m].pubcount[n]=data[m].pubcount2[n]\r\n");
      out.write("                    }\r\n");
      out.write("                }\r\n");
      out.write("                console.log(data)\r\n");
      out.write("                drawlines()\r\n");
      out.write("            })\r\n");
      out.write("    </script>\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
