/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.16
 * Generated at: 2022-06-13 09:31:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.sqltest;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class tree_005fciyun_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("	<head>\r\n");
      out.write("		<meta charset=\"utf-8\">\r\n");
      out.write("		<title></title>\r\n");
      out.write("	</head>\r\n");
      out.write("	<body>\r\n");
      out.write("		<script src = \"https://d3js.org/d3.v7.min.js\"></script>\r\n");
      out.write("		<script type=\"text/javascript\">  \r\n");
      out.write("			\r\n");
      out.write("		var nodes = [{name:\"a.IM\" },{name:\"AI\" },\r\n");
      out.write("		{name:\"CL\"},{name: \"CV\"},{name: \"DC\"},\r\n");
      out.write("		{name: \"LG\" },{name: \"NE\"},\r\n");
      out.write("		{name: \"RO\" },{name:\"SD\" },{name:\"ST\" },\r\n");
      out.write("		{name:\"p.data\" },{name:\"p.soc\"},\r\n");
      out.write("		{name: \"q.BM\" },{name:\"q.RM\"},{name:\"s.AP\" },\r\n");
      out.write("		{name:\"s.ME\" },{name:\"s.ML\" }];\r\n");
      out.write("		var chinese = [\"ä»ªå¨ä»ªè¡¨åå¤©ä½ç©çå­¦æ¹æ³\",\"äººå·¥æºè½\",\r\n");
      out.write("		  \"è®¡ç®ä¸è¯­è¨\",\"æºå¨è§è§ä¸æ¨¡å¼è¯å«\",\"åå¸å¼å¹¶è¡ä¸éç¾¤è®¡ç®\",\"èªå¨å­¦ä¹ \",\"ç¥ç»ä¸è¿åè®¡ç®\",\r\n");
      out.write("		  \"æºå¨äººå­¦\",\"å£°é³å¤ç\",\"ç»è®¡çè®º\",\"æ°æ®åæç»è®¡åæ¦ç\",\"ç©çå­¦ä¸ç¤¾ä¼\",\"çç©åå­\",\r\n");
      out.write("		  \"é£é©ç®¡ç\",\"åºç¨ç»è®¡\",\"ç»è®¡æ¹æ³è®º\",\"(ç»è®¡)æºå¨å­¦ä¹ \"];\r\n");
      out.write("		var edge_data =[[0, 59, 3, 148, 158, 326, 32, 34, 2, 0, 57, 32, 0, 0, 10, 9, 79],\r\n");
      out.write("			[59,0,6399,6619,600,19141,2319,3273,531,154,78,136,45,8,249,254,5991],\r\n");
      out.write("			[3,6399,0,1826,58,8838,677,207,1913,11,80,320,13,2,116,25,1958],\r\n");
      out.write("			[148,6619,1823,0,277,19540,1633,3778,448,56,128,32,22,0,248,105,5336],\r\n");
      out.write("			[158, 600, 56, 277, 0, 2239, 240, 140, 10, 18, 31, 38, 14, 1, 22, 18, 730],\r\n");
      out.write("			[326,19141,8824,19540,2239,0,4948,3807,3159,1861,515,331,290,65,1341,1526, 44983],\r\n");
      out.write("			[32,2319,674,1633,240,4948, 0,326,154,36,36,48,16,2,32,23,1836],\r\n");
      out.write("			[34, 3273, 191, 3778, 140, 3807, 326, 0, 55, 5, 4, 6, 1, 0, 49, 9, 734],\r\n");
      out.write("			[2, 531, 1903, 448, 10, 3159, 154, 55, 0, 6, 16, 10, 1, 0, 29, 9, 804],\r\n");
      out.write("			[0, 154, 10, 56, 18, 1861, 36, 5, 6, 0, 58, 36, 2, 1, 61, 327, 1603],\r\n");
      out.write("			[57, 78, 77, 128, 31, 515, 36, 4, 16, 58, 0, 670, 4, 1, 80, 71, 295],\r\n");
      out.write("			[32, 136, 320, 32, 38, 331, 48, 6, 10, 36, 670, 0, 1, 8, 292, 111, 248],\r\n");
      out.write("			[0, 45, 13, 22, 14, 290, 16, 1, 1, 2, 4, 1, 0, 0, 5, 4, 86],\r\n");
      out.write("			[0, 8, 2, 0, 1, 65, 2, 0, 0, 1, 1, 8, 0, 0, 8, 2, 28],\r\n");
      out.write("			[10, 249, 113, 248, 22, 1341, 32, 49, 29, 61, 80, 292, 5, 8, 0, 270, 985],\r\n");
      out.write("			[10, 314, 58, 132, 44, 1842, 64, 11, 10, 376, 191, 789, 8, 5, 291, 0, 1491],\r\n");
      out.write("			[79,5991,1954,5336,730,44983,1836,734,804,1603,295,248,86,28,985,1302,0]]      \r\n");
      out.write("		var edges = new Array(16*16);\r\n");
      out.write("		for (i = 0;i < 17;i ++)\r\n");
      out.write("		{\r\n");
      out.write("			for (j = 0;j < 17;j ++)\r\n");
      out.write("			{\r\n");
      out.write("				edges[16*i+j] = {\"source\":i,\"target\":j,\"value\":edge_data[i][j]}\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("		console.log('åæ°ç»ï¼',edges);\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		function drag(){\r\n");
      out.write("		    function dragstarted(event,d){\r\n");
      out.write("		        if(!event.active) forceSimulation.alphaTarget(0.3).restart();\r\n");
      out.write("		            d.fx=d.x\r\n");
      out.write("		            d.fy=d.y\r\n");
      out.write("		        }\r\n");
      out.write("		    function dragged(event,d){\r\n");
      out.write("		        d.fx=event.x\r\n");
      out.write("		        d.fy=event.y\r\n");
      out.write("		    }\r\n");
      out.write("		    function dragended(event,d){\r\n");
      out.write("		        if(!event.active) forceSimulation.alphaTarget(0);\r\n");
      out.write("		            d.fx=null\r\n");
      out.write("		            d.fy=null\r\n");
      out.write("		    }\r\n");
      out.write("		    return d3.drag()\r\n");
      out.write("		            .on(\"start\",dragstarted)\r\n");
      out.write("		            .on(\"drag\",dragged)\r\n");
      out.write("		            .on(\"end\",dragended)\r\n");
      out.write("		}\r\n");
      out.write("		var forceSimulation=d3.forceSimulation()\r\n");
      out.write("		            .force(\"link\",d3.forceLink())\r\n");
      out.write("		            .force(\"charge\",d3.forceManyBody().strength(-20))\r\n");
      out.write("		            .force(\"center\",d3.forceCenter(950,3600));\r\n");
      out.write("		forceSimulation.nodes(nodes)\r\n");
      out.write("		                .on(\"tick\")\r\n");
      out.write("		forceSimulation.force(\"link\")\r\n");
      out.write("		                .links(edges)\r\n");
      out.write("		                .distance(function(d){\r\n");
      out.write("		                    return 600;\r\n");
      out.write("		                })\r\n");
      out.write("		var path=svg.selectAll(\".mypath\")\r\n");
      out.write("		            .data(edges)\r\n");
      out.write("		            .enter()\r\n");
      out.write("		            .append(\"path\")\r\n");
      out.write("		            .attr(\"class\",\"mypath\")\r\n");
      out.write("		            .attr(\"id\",function(d,i){\r\n");
      out.write("		                return \"edgepath\"+i\r\n");
      out.write("		            })\r\n");
      out.write("		            .attr(\"stroke\",d3.rgb(186, 235, 252))\r\n");
      out.write("		            .attr(\"opacity\",\"50%\")  \r\n");
      out.write("		            .style(\"stroke-width\",function(d,i){\r\n");
      out.write("		                return 2\r\n");
      out.write("		            })\r\n");
      out.write("		function set_single(n)\r\n");
      out.write("		{\r\n");
      out.write("			var edges_ = new Array(17);\r\n");
      out.write("			var length = new Array(17);\r\n");
      out.write("			for (j = 0;j < 17;j ++)\r\n");
      out.write("			{\r\n");
      out.write("				edges_[j] = {\"source\":n,\"target\":j,\"value\":edge_data[n][j]}\r\n");
      out.write("				length[j] = edge_data[n][j]\r\n");
      out.write("			}\r\n");
      out.write("			var forceSimulation=d3.forceSimulation()\r\n");
      out.write("			            .force(\"link\",d3.forceLink())\r\n");
      out.write("			            .force(\"charge\",d3.forceManyBody().strength(-100))\r\n");
      out.write("			            .force(\"center\",d3.forceCenter(900,3800));\r\n");
      out.write("			forceSimulation.nodes(nodes)\r\n");
      out.write("			                .on(\"tick\")\r\n");
      out.write("			forceSimulation.force(\"link\")\r\n");
      out.write("			                .links(edges_)\r\n");
      out.write("			                .distance(function(d,i){\r\n");
      out.write("                          var max = Math.max.apply(Math,length);\r\n");
      out.write("                          var min = Math.min.apply(Math,length);\r\n");
      out.write("                          return (length[i]-min)/(max - min)*300+300;\r\n");
      out.write("                      })\r\n");
      out.write("			var path=svg.selectAll(\".mypath\")\r\n");
      out.write("			            .data(edges_)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"path\")\r\n");
      out.write("			            .attr(\"class\",\"mypath\")\r\n");
      out.write("			            .attr(\"id\",function(d,i){\r\n");
      out.write("			                return \"edgepath\"+i\r\n");
      out.write("			            })\r\n");
      out.write("			            .attr(\"stroke\",d3.rgb(186, 235, 252))\r\n");
      out.write("			            .attr(\"opacity\",\"50%\")  \r\n");
      out.write("			            .style(\"stroke-width\",function(d,i){\r\n");
      out.write("			                return 4\r\n");
      out.write("			            })\r\n");
      out.write("			var dott=svg.selectAll(\".node\")\r\n");
      out.write("			            .data(nodes)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"circle\")\r\n");
      out.write("			            .attr(\"class\",\"node\")\r\n");
      out.write("			            .attr(\"r\",function(d,i){\r\n");
      out.write("                          var max = Math.max.apply(Math,length);\r\n");
      out.write("                          var min = Math.min.apply(Math,length);\r\n");
      out.write("                          return (length[i]-min)/(max - min)*50+30;\r\n");
      out.write("                      })\r\n");
      out.write("			            .attr(\"id\",function(d,i){\r\n");
      out.write("			                return \"dot\"+i\r\n");
      out.write("			            })\r\n");
      out.write("						.attr(\"fill\",d3.rgb(252,157,154))\r\n");
      out.write("						.attr(\"opacity\",\"70%\")\r\n");
      out.write("						.style(\"stroke-width\",function(d,i){\r\n");
      out.write("						    return 2\r\n");
      out.write("						})\r\n");
      out.write("			            .call(drag())\r\n");
      out.write("						.on(\"dblclick\",function(d,i)\r\n");
      out.write("						{\r\n");
      out.write("							d3.selectAll(\".node\").remove()\r\n");
      out.write("							d3.selectAll(\".mypath\").remove()\r\n");
      out.write("							d3.selectAll(\".ttxt\").remove()\r\n");
      out.write("							d3.selectAll(\".etxt\").remove()\r\n");
      out.write("							d3.selectAll(\".imgdefs\").remove()\r\n");
      out.write("							set_single(i);\r\n");
      out.write("							})\r\n");
      out.write("				var ttxt=svg.selectAll(\".ttxt\")\r\n");
      out.write("				            .data(nodes)\r\n");
      out.write("				            .enter()\r\n");
      out.write("				            .append(\"text\")\r\n");
      out.write("				            .text(function(d,i){\r\n");
      out.write("				                return d.name\r\n");
      out.write("				            })\r\n");
      out.write("				            .attr(\"class\",\"ttxt\")\r\n");
      out.write("				            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("				            .attr(\"font-size\",25)\r\n");
      out.write("				            .call(drag())\r\n");
      out.write("				\r\n");
      out.write("				var etxt=svg.selectAll(\".etxt\")\r\n");
      out.write("				            .data(edges_)\r\n");
      out.write("				            .enter()\r\n");
      out.write("				            .append(\"text\")\r\n");
      out.write("				            .append(\"textPath\")\r\n");
      out.write("				            .attr(\"xlink:href\",function(d,i){\r\n");
      out.write("				                return \"#edgepath\"+i\r\n");
      out.write("				            })\r\n");
      out.write("				            .text(function(d,i){\r\n");
      out.write("				                if(d.value>10){\r\n");
      out.write("				                    return d.value\r\n");
      out.write("				                }\r\n");
      out.write("				                else{\r\n");
      out.write("				                    return \"\"\r\n");
      out.write("				                }\r\n");
      out.write("				            })\r\n");
      out.write("				            .attr(\"startOffset\",\"50%\")\r\n");
      out.write("				            .attr(\"class\",\"etxt\")\r\n");
      out.write("				            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("				            .attr(\"font-size\",16)\r\n");
      out.write("				\r\n");
      out.write("				forceSimulation.on(\"tick\",()=>{\r\n");
      out.write("				    path.attr(\"d\",function(d){\r\n");
      out.write("				        return \"M\"+d.source.x+\",\"+d.source.y+\"L\"+d.target.x+\",\"+d.target.y\r\n");
      out.write("				    })\r\n");
      out.write("				    dott.attr(\"cx\",d=>d.x)\r\n");
      out.write("				        .attr(\"cy\",d=>d.y)\r\n");
      out.write("				    ttxt.attr(\"transform\",function(d){\r\n");
      out.write("				        return \"translate(\"+(d.x)+\",\"+(d.y+5+15)+\")\"\r\n");
      out.write("				    })\r\n");
      out.write("				})\r\n");
      out.write("			\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("		var dott=svg.selectAll(\".node\")\r\n");
      out.write("		            .data(nodes)\r\n");
      out.write("		            .enter()\r\n");
      out.write("		            .append(\"circle\")\r\n");
      out.write("		            .attr(\"class\",\"node\")\r\n");
      out.write("		            .attr(\"r\",function(d,i){\r\n");
      out.write("		                return 30\r\n");
      out.write("		            })\r\n");
      out.write("		            .attr(\"id\",function(d,i){\r\n");
      out.write("		                return \"dot\"+i\r\n");
      out.write("		            })\r\n");
      out.write("					.attr(\"fill\",d3.rgb(252,157,154))\r\n");
      out.write("					.attr(\"opacity\",\"70%\")\r\n");
      out.write("					.style(\"stroke-width\",function(d,i){\r\n");
      out.write("					    return 2\r\n");
      out.write("					})\r\n");
      out.write("		            .call(drag())\r\n");
      out.write("					.on(\"dblclick\",function(d,i)\r\n");
      out.write("					{\r\n");
      out.write("						d3.selectAll(\".node\").remove()\r\n");
      out.write("						d3.selectAll(\".mypath\").remove()\r\n");
      out.write("						d3.selectAll(\".ttxt\").remove()\r\n");
      out.write("						d3.selectAll(\".etxt\").remove()\r\n");
      out.write("						d3.selectAll(\".imgdefs\").remove()\r\n");
      out.write("						set_single(i);\r\n");
      out.write("						})\r\n");
      out.write("					\r\n");
      out.write("		\r\n");
      out.write("		var ttxt=svg.selectAll(\".ttxt\")\r\n");
      out.write("		            .data(nodes)\r\n");
      out.write("		            .enter()\r\n");
      out.write("		            .append(\"text\")\r\n");
      out.write("		            .text(function(d,i){\r\n");
      out.write("		                return d.name\r\n");
      out.write("		            })\r\n");
      out.write("		            .attr(\"class\",\"ttxt\")\r\n");
      out.write("		            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("		            .attr(\"font-size\",25)\r\n");
      out.write("		            .call(drag())\r\n");
      out.write("		\r\n");
      out.write("		var etxt=svg.selectAll(\".etxt\")\r\n");
      out.write("		            .data(edges)\r\n");
      out.write("		            .enter()\r\n");
      out.write("		            .append(\"text\")\r\n");
      out.write("		            .append(\"textPath\")\r\n");
      out.write("		            .attr(\"xlink:href\",function(d,i){\r\n");
      out.write("		                return \"#edgepath\"+i\r\n");
      out.write("		            })\r\n");
      out.write("		            .text(function(d,i){\r\n");
      out.write("		                if(d.value>10){\r\n");
      out.write("		                    return d.value\r\n");
      out.write("		                }\r\n");
      out.write("		                else{\r\n");
      out.write("		                    return \"\"\r\n");
      out.write("		                }\r\n");
      out.write("		            })\r\n");
      out.write("		            .attr(\"startOffset\",\"50%\")\r\n");
      out.write("		            .attr(\"class\",\"etxt\")\r\n");
      out.write("		            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("		            .attr(\"font-size\",12)\r\n");
      out.write("		\r\n");
      out.write("		forceSimulation.on(\"tick\",()=>{\r\n");
      out.write("		    path.attr(\"d\",function(d){\r\n");
      out.write("		        return \"M\"+d.source.x+\",\"+d.source.y+\"L\"+d.target.x+\",\"+d.target.y\r\n");
      out.write("		    })\r\n");
      out.write("		    dott.attr(\"cx\",d=>d.x)\r\n");
      out.write("		        .attr(\"cy\",d=>d.y)\r\n");
      out.write("		    ttxt.attr(\"transform\",function(d){\r\n");
      out.write("		        return \"translate(\"+(d.x)+\",\"+(d.y+5+15)+\")\"\r\n");
      out.write("		    })\r\n");
      out.write("		})\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		function btn(){\r\n");
      out.write("			d3.selectAll(\".node\").remove()\r\n");
      out.write("			d3.selectAll(\".mypath\").remove()\r\n");
      out.write("			d3.selectAll(\".ttxt\").remove()\r\n");
      out.write("			d3.selectAll(\".etxt\").remove()\r\n");
      out.write("			d3.selectAll(\".imgdefs\").remove()\r\n");
      out.write("			var forceSimulation=d3.forceSimulation()\r\n");
      out.write("			            .force(\"link\",d3.forceLink())\r\n");
      out.write("			            .force(\"charge\",d3.forceManyBody().strength(-20))\r\n");
      out.write("			            .force(\"center\",d3.forceCenter(950,3600));\r\n");
      out.write("			forceSimulation.nodes(nodes)\r\n");
      out.write("			                .on(\"tick\")\r\n");
      out.write("			forceSimulation.force(\"link\")\r\n");
      out.write("			                .links(edges)\r\n");
      out.write("			                .distance(function(d){\r\n");
      out.write("			                    return 600;\r\n");
      out.write("			                })\r\n");
      out.write("			var path=svg.selectAll(\".mypath\")\r\n");
      out.write("			            .data(edges)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"path\")\r\n");
      out.write("			            .attr(\"class\",\"mypath\")\r\n");
      out.write("			            .attr(\"id\",function(d,i){\r\n");
      out.write("			                return \"edgepath\"+i\r\n");
      out.write("			            })\r\n");
      out.write("			            .attr(\"stroke\",d3.rgb(186, 235, 252))\r\n");
      out.write("			            .attr(\"opacity\",\"50%\")  \r\n");
      out.write("			            .style(\"stroke-width\",function(d,i){\r\n");
      out.write("			                return 2\r\n");
      out.write("			            })\r\n");
      out.write("			var dott=svg.selectAll(\".node\")\r\n");
      out.write("			            .data(nodes)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"circle\")\r\n");
      out.write("			            .attr(\"class\",\"node\")\r\n");
      out.write("			            .attr(\"r\",function(d,i){\r\n");
      out.write("			                return 30\r\n");
      out.write("			            })\r\n");
      out.write("			            .attr(\"id\",function(d,i){\r\n");
      out.write("			                return \"dot\"+i\r\n");
      out.write("			            })\r\n");
      out.write("						.attr(\"fill\",d3.rgb(252,157,154))\r\n");
      out.write("						.attr(\"opacity\",\"70%\")\r\n");
      out.write("						.style(\"stroke-width\",function(d,i){\r\n");
      out.write("						    return 2\r\n");
      out.write("						})\r\n");
      out.write("			            .call(drag())\r\n");
      out.write("						.on(\"dblclick\",function(d,i)\r\n");
      out.write("						{\r\n");
      out.write("							d3.selectAll(\".node\").remove()\r\n");
      out.write("							d3.selectAll(\".mypath\").remove()\r\n");
      out.write("							d3.selectAll(\".ttxt\").remove()\r\n");
      out.write("							d3.selectAll(\".etxt\").remove()\r\n");
      out.write("							d3.selectAll(\".imgdefs\").remove()\r\n");
      out.write("							set_single(i);\r\n");
      out.write("							})\r\n");
      out.write("						\r\n");
      out.write("			\r\n");
      out.write("			var ttxt=svg.selectAll(\".ttxt\")\r\n");
      out.write("			            .data(nodes)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"text\")\r\n");
      out.write("			            .text(function(d,i){\r\n");
      out.write("			                return d.name\r\n");
      out.write("			            })\r\n");
      out.write("			            .attr(\"class\",\"ttxt\")\r\n");
      out.write("			            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("			            .attr(\"font-size\",25)\r\n");
      out.write("			            .call(drag())\r\n");
      out.write("			\r\n");
      out.write("			var etxt=svg.selectAll(\".etxt\")\r\n");
      out.write("			            .data(edges)\r\n");
      out.write("			            .enter()\r\n");
      out.write("			            .append(\"text\")\r\n");
      out.write("			            .append(\"textPath\")\r\n");
      out.write("			            .attr(\"xlink:href\",function(d,i){\r\n");
      out.write("			                return \"#edgepath\"+i\r\n");
      out.write("			            })\r\n");
      out.write("			            .text(function(d,i){\r\n");
      out.write("			                if(d.value>10){\r\n");
      out.write("			                    return d.value\r\n");
      out.write("			                }\r\n");
      out.write("			                else{\r\n");
      out.write("			                    return \"\"\r\n");
      out.write("			                }\r\n");
      out.write("			            })\r\n");
      out.write("			            .attr(\"startOffset\",\"50%\")\r\n");
      out.write("			            .attr(\"class\",\"etxt\")\r\n");
      out.write("			            .attr(\"text-anchor\",\"middle\")\r\n");
      out.write("			            .attr(\"font-size\",12)\r\n");
      out.write("			\r\n");
      out.write("			forceSimulation.on(\"tick\",()=>{\r\n");
      out.write("			    path.attr(\"d\",function(d){\r\n");
      out.write("			        return \"M\"+d.source.x+\",\"+d.source.y+\"L\"+d.target.x+\",\"+d.target.y\r\n");
      out.write("			    })\r\n");
      out.write("			    dott.attr(\"cx\",d=>d.x)\r\n");
      out.write("			        .attr(\"cy\",d=>d.y)\r\n");
      out.write("			    ttxt.attr(\"transform\",function(d){\r\n");
      out.write("			        return \"translate(\"+(d.x)+\",\"+(d.y+5+15)+\")\"\r\n");
      out.write("			    })\r\n");
      out.write("			})\r\n");
      out.write("		}\r\n");
      out.write("		</script>\r\n");
      out.write("		\r\n");
      out.write("	</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
