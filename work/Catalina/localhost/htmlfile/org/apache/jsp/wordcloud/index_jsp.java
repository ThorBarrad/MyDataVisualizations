/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.16
 * Generated at: 2022-04-20 05:26:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.wordcloud;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import com.mysql.jdbc.Driver;
import java.sql.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.jdbc.Driver");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<body>\r\n");
      out.write("    <h1 style=\"text-align: right;\">\r\n");
      out.write("        arXiv计算机各类论文词云图\r\n");
      out.write("    </h1>\r\n");
      out.write("    <h2 style=\"text-align: right;\">\r\n");
      out.write("        19数科蒋卓良\r\n");
      out.write("    </h2>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    ");

        String driverName="com.mysql.jdbc.Driver";
        String userName="root";
        String userPasswd="jzljzl233";
        String dbName="english";
        String tableName="paper2";
        String url="jdbc:mysql://localhost/"+dbName+"?user="+userName+"&password="+userPasswd;
        Class.forName(driverName).newInstance();
        Connection connection=DriverManager.getConnection(url);
        Statement statement=connection.createStatement();
        
        String sql="SELECT SUM(AI),SUM(AR),SUM(CC),SUM(CE),SUM(CG),SUM(CL),SUM(CR),SUM(CV),SUM(CY),SUM(DB),SUM(DC),SUM(DL),SUM(DM),SUM(DS),SUM(ET),SUM(FL),SUM(GL),SUM(GR),SUM(GT),SUM(HC),SUM(IR),SUM(IT),SUM(LG),SUM(LO),SUM(MA),SUM(MM),SUM(MS),SUM(NA),SUM(NE),SUM(NI),SUM(OH),SUM(OS),SUM(PF),SUM(PL),SUM(RO),SUM(SC),SUM(SD),SUM(SE),SUM(SI),SUM(SY) FROM english.paper2";

        ResultSet rs=statement.executeQuery(sql);

        String[] catcount=new String[40];
        rs.next();
        for(int count=0;count<40;count++){
            catcount[count]=rs.getString(count+1);
            //out.print(rs.getString(count+1)+"<br>");
        }

        rs.close();
        statement.close();
        connection.close();
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <!-- <script src=\"../d3.v3.min.js\" charset=\"utf-8\"></script> -->\r\n");
      out.write("    <!-- <script src=\"../d3.layout.cloud.js\"></script> -->\r\n");
      out.write("\r\n");
      out.write("    <script src=\"../d3.min.js\" charset=\"utf-8\"></script>\r\n");
      out.write("    <!-- <script src=\"https://cdn.rawgit.com/jasondavies/d3-cloud/master/build/d3.layout.cloud.js\"></script> -->\r\n");
      out.write("    <script src=\"../package/d3.layout.cloud2.js\"></script>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        var screenwidth=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth;\r\n");
      out.write("        var screenheight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;\r\n");
      out.write("        screenwidth=screenwidth-50;\r\n");
      out.write("        screenheight=screenheight-180;\r\n");
      out.write("\r\n");
      out.write("        var color=d3.schemeCategory10;\r\n");
      out.write("\r\n");
      out.write("        var sbj=new Array(\r\n");
      out.write("            \"Artificial Intelligence\",\r\n");
      out.write("            \"Hardware Architecture\",\r\n");
      out.write("            \"Computational Complexity\",\r\n");
      out.write("            \"Computational Engineering, Finance, and Science\",\r\n");
      out.write("            \"Computational Geometry\",\r\n");
      out.write("            \"Computation and Language\",\r\n");
      out.write("            \"Cryptography and Security\",\r\n");
      out.write("            \"Computer Vision and Pattern Recognition\",\r\n");
      out.write("            \"Computers and Society\",\r\n");
      out.write("            \"Databases\",\r\n");
      out.write("\r\n");
      out.write("            \"Distributed, Parallel, and Cluster Computing\",\r\n");
      out.write("            \"Digital Libraries\",\r\n");
      out.write("            \"Discrete Mathematics\",\r\n");
      out.write("            \"Data Structures and Algorithms\",\r\n");
      out.write("            \"Emerging Technologies\",\r\n");
      out.write("            \"Formal Languages and Automata Theory\",\r\n");
      out.write("            \"General Literature\",\r\n");
      out.write("            \"Graphics\",\r\n");
      out.write("            \"Computer Science and Game Theory\",\r\n");
      out.write("            \"Human-Computer Interaction\",\r\n");
      out.write("\r\n");
      out.write("            \"Information Retrieval\",\r\n");
      out.write("            \"Information Theory\",\r\n");
      out.write("            \"Machine Learning\",\r\n");
      out.write("            \"Logic in Computer Science\",\r\n");
      out.write("            \"Multiagent Systems\",\r\n");
      out.write("            \"Multimedia\",\r\n");
      out.write("            \"Mathematical Software\",\r\n");
      out.write("            \"Numerical Analysis\",\r\n");
      out.write("            \"Neural and Evolutionary Computing\",\r\n");
      out.write("            \"Networking and Internet Architecture\",\r\n");
      out.write("\r\n");
      out.write("            \"Other Computer Science\",\r\n");
      out.write("            \"Operating Systems\",\r\n");
      out.write("            \"Performance\",\r\n");
      out.write("            \"Programming Languages\",\r\n");
      out.write("            \"Robotics\",\r\n");
      out.write("            \"Symbolic Computation\",\r\n");
      out.write("            \"Sound\",\r\n");
      out.write("            \"Software Engineering\",\r\n");
      out.write("            \"Social and Information Networks\",\r\n");
      out.write("            \"Systems and Control\",\r\n");
      out.write("            )\r\n");
      out.write("        var words=new Array(40)	\r\n");
      out.write("        ");
for(int i=0;i<40;i++){
      out.write("\r\n");
      out.write("            words[");
      out.print(i);
      out.write("]={text:sbj[");
      out.print(i);
      out.write("],size:");
      out.print(catcount[i]);
      out.write(",data:");
      out.print(catcount[i]);
      out.write("}\r\n");
      out.write("        ");
}
      out.write("\r\n");
      out.write("\r\n");
      out.write("        console.log(words)\r\n");
      out.write("\r\n");
      out.write("        var wc=d3.layout.cloud()\r\n");
      out.write("                    .size([1024, 512])\r\n");
      out.write("                    .words(words)\r\n");
      out.write("                    .padding(3)\r\n");
      out.write("                    .rotate(function() { \r\n");
      out.write("                        a=Math.round(Math.random())*2-1\r\n");
      out.write("                        console.log(a)\r\n");
      out.write("                        return a * 45;\r\n");
      out.write("                    })\r\n");
      out.write("                    .fontSize(function(d) { \r\n");
      out.write("                        return Math.round(10+40*d.size/100000)\r\n");
      out.write("                    })\r\n");
      out.write("                    .on(\"end\", draw)\r\n");
      out.write("                    .start();\r\n");
      out.write("\r\n");
      out.write("        function draw(words) {\r\n");
      out.write("            var svg=d3.select(\"body\")\r\n");
      out.write("                        .append(\"svg\")\r\n");
      out.write("                        .attr(\"width\", screenwidth)\r\n");
      out.write("                        .attr(\"height\", screenheight)\r\n");
      out.write("            svg.selectAll(\"text\")\r\n");
      out.write("                .data(words)\r\n");
      out.write("                .enter()\r\n");
      out.write("                .append(\"text\")\r\n");
      out.write("                .style(\"font-size\", function(d){ \r\n");
      out.write("                    return d.size+ \"px\"; \r\n");
      out.write("                })\r\n");
      out.write("                .style(\"fill\", function(d, i) {\r\n");
      out.write("                    return color[i%10]; \r\n");
      out.write("                })\r\n");
      out.write("                .attr(\"text-anchor\", \"middle\")\r\n");
      out.write("                .attr(\"transform\", function(d) {\r\n");
      out.write("                    return \"translate(\" + (screenwidth/2+d.x)+\",\"+(screenheight/2+d.y) + \")rotate(\" + d.rotate + \")\";\r\n");
      out.write("                })\r\n");
      out.write("                .text(function(d) {\r\n");
      out.write("                    return d.text; \r\n");
      out.write("                })\r\n");
      out.write("                .on(\"mouseover\",function(d,i){\r\n");
      out.write("                    d3.select(this).text(function(d){\r\n");
      out.write("                        return d.data\r\n");
      out.write("                    })\r\n");
      out.write("                })\r\n");
      out.write("                .on(\"mouseout\",function(d,i){\r\n");
      out.write("                    d3.select(this).text(function(d){\r\n");
      out.write("                        return d.text\r\n");
      out.write("                    })\r\n");
      out.write("                })\r\n");
      out.write("         }\r\n");
      out.write("    </script>\r\n");
      out.write("</body>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
